from buildbot.buildslave import BuildSlave
from buildbot.schedulers.basic import SingleBranchScheduler, Dependent
from buildbot.schedulers.timed import Nightly
from buildbot.changes.pb import PBChangeSource
from buildbot.changes.filter import ChangeFilter
from buildbot.process import factory
from buildbot.process.buildstep import BuildStep
from buildbot.steps.source import Git
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import WarningCountingShellCommand
from buildbot.status import html, mail
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.process.properties import WithProperties
from buildbot.status.results import SUCCESS, FAILURE
from buildbot.locks import BaseLockId, BaseLock, SlaveLock
import csv

# This code lets us enforce a count across a graph of buildslaves.
class RealSlavegroupLock:
    def __init__(self, lockid):
        self.name = lockid.name
        self.maxCount = lockid.maxCount
        self.maxCountForSlavegroup = lockid.maxCountForSlavegroup
        self.slaveToSlavegroup = lockid.slaveToSlavegroup
        self.description = "<SlavegroupLock(%s, %s, %s, %s)>" % (self.name,
                                                                 self.maxCount,
                                                                 self.maxCountForSlavegroup,
                                                                 self.slaveToSlavegroup)
        self.locks = {}
    def __repr__(self):
        return self.description
    def getLock(self, slave):
        slavename = slave.slavename
        # slavegroup defaults to slavename
        slavegroup = self.slaveToSlavegroup.get(slavename, slavename)
        if not self.locks.has_key(slavegroup):
            maxCount = self.maxCountForSlavegroup.get(slavegroup,
                                                      self.maxCount)
            lock = self.locks[slavegroup] = BaseLock(self.name, maxCount)
            desc = "<SlavegroupLock(%s, %s)[%s] %d>" % (self.name, maxCount,
                                                        slavegroup, id(lock))
            lock.description = desc
            self.locks[slavegroup] = lock
        return self.locks[slavegroup]

# Note: this only inherits from SlaveLock to get past an assert. Ideally the
# buildbot code would be changed to allow other lock types.
class SlavegroupLock(SlaveLock):
    """I am a semaphore that limits simultaneous actions on each group of
    buildslaves.

    Builds and BuildSteps can declare that they wish to claim me as they run.
    Only a limited number of such builds or steps will be able to run
    simultaneously on any given group of buildslave. By default this number is one,
    but my maxCount parameter can be raised to allow two or three or more
    operations to happen across a group of buildslaves at the same time.

    Use this to protect a resource that is shared among all the builds taking
    place on a group of slaves that share resources, for example to limit CPU
    or memory load on an underpowered machine that runs multiple buildslaves.

    Each buildslave can be assigned to a group using the dictionary
    slaveToSlavegroup; buildslaves that do not appear in this dictionary are
    placed in the slavegroup with a name equal to the name of the buildslave.

    Each group of buildslaves will get an independent copy of this semaphore. By
    default each copy will use the same owner count (set with maxCount), but
    you can provide maxCountForSlavegroup with a dictionary that maps
    slavegroup to owner count, to allow some slavegroups more parallelism than
    others.
    """

    compare_attrs = ['name', 'maxCount', '_maxCountForSlavegroupList',
                     '_slaveToSlavegroupList']
    lockClass = RealSlavegroupLock
    def __init__(self, name, maxCount=1, maxCountForSlavegroup={}, slaveToSlavegroup={}):
        self.name = name
        self.maxCount = maxCount
        self.maxCountForSlavegroup = maxCountForSlavegroup
        self.slaveToSlavegroup = slaveToSlavegroup
        # for comparison purposes, turn this dictionary into a stably-sorted
        # list of tuples
        self._maxCountForSlavegroupList = self.maxCountForSlavegroup.items()
        self._maxCountForSlavegroupList.sort()
        self._maxCountForSlavegroupList = tuple(self._maxCountForSlavegroupList)
        self._slaveToSlavegroupList = self.slaveToSlavegroup.items()
        self._slaveToSlavegroupList.sort()
        self._slaveToSlavegroupList = tuple(self._slaveToSlavegroupList)

# The main buildmaster configuration object (added to below).
c = BuildmasterConfig = {}

# Read a list of buildslaves and tell buildbot about them...
r = csv.reader(open('/home/autotest/cellml-build/build-slaves.csv'))
c['slaves'] = []
slavenames = []
slaveToSlavegroup = {}
for row in r:
    # row[0]: name, row[1]: password, row[2]: max concurrent builds, row[3]: properties, row[4]: slavegroup.
    slavenames.append(row[0])
    slaveToSlavegroup[row[0]] = row[4]
    c['slaves'].append(BuildSlave(row[0], row[1], max_builds=row[2], properties=eval(row[3])))

# Application builds only happen on production buildbots.
appslavenames = filter(lambda x: not (('debug' in x) or ('mingw' in x) or ('msvc11' in x)), slavenames)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989

# PB is used inform the buildbot of code changes (via an external hook).
c['change_source'] = PBChangeSource()

# Create a filter that will only see changes on the default branch...
apiFilter = ChangeFilter(project='CellMLAPI', branch="master")
openCORCISFilter = ChangeFilter(project='OpenCORCIS', branch="master")
openCORAGFilter = ChangeFilter(project='OpenCORAG', branch="master")

# Make a list of builders to do on commit.
onCommitAPIBuilders = map(lambda x: "CellMLAPI-" + x, slavenames) # + ["valgrind"]
nightlyAPIBuilders = map(lambda x: "CellMLAPI-" + x, slavenames)

onCommitOpenCORCISBuilders = map(lambda x: "OpenCORCIS-" + x, appslavenames)
nightlyOpenCORCISBuilders = map(lambda x: "OpenCORCIS-" + x, appslavenames)

onCommitOpenCORAGBuilders = map(lambda x: "OpenCORAG-" + x, appslavenames)
nightlyOpenCORAGBuilders = map(lambda x: "OpenCORAG-" + x, appslavenames)

# Create scheduler which picks up commits on the master branch and triggers a
# build...
checkinAPI = SingleBranchScheduler(name="onCommitAPI", change_filter=apiFilter,
                    builderNames=onCommitAPIBuilders,
                    properties={"clean": False, "targets": "all test buildpython"}, treeStableTimer=10)
checkinOpenCORCIS = SingleBranchScheduler(name="onCommitOpenCORCIS", change_filter=openCORCISFilter,
                                          builderNames=onCommitOpenCORCISBuilders,
                                          properties={ "clean": False }, treeStableTimer=10)
checkinOpenCORAG = SingleBranchScheduler(name="onCommitOpenCORAG", change_filter=openCORAGFilter,
                                         builderNames=onCommitOpenCORAGBuilders,
                                         properties={ "clean": False }, treeStableTimer=10)

# And one that runs at 10 PM every night...
nightlyAPI = Nightly(name="nightlyAPI", hour=22,
                  builderNames=nightlyAPIBuilders + nightlyOpenCORCISBuilders + nightlyOpenCORAGBuilders,
                  branch='master',
                  properties={"clean": True, "targets": "all test buildpython package release"},
                  onlyIfChanged=True,
                  change_filter=apiFilter)
nightlyOCCIS = Nightly(name="nightlyOCCIS", hour=22,
                    builderNames=nightlyOpenCORCISBuilders,
                    branch='master',
                    properties={"clean": True, "targets": "all"},
                    onlyIfChanged=True,
                    change_filter=openCORCISFilter)
nightlyOCAG = Nightly(name="nightlyOCAG", hour=22,
                    builderNames=nightlyOpenCORAGBuilders,
                    branch='master',
                    properties={"clean": True, "targets": "all"},
                    onlyIfChanged=True,
                    change_filter=openCORAGFilter)

tryServ = Try_Userpass(name="tryServ",
                       builderNames=onCommitAPIBuilders,
                       port=8031,
                       userpass=csv.reader(open('/home/autotest/cellml-build/tryserv-access.csv')),
                       properties={"clean": False, "targets": "all"})

c['schedulers'] = [checkinAPI, checkinOpenCORCIS, checkinOpenCORAG, nightlyAPI, nightlyOCCIS,
                   nightlyOCAG, tryServ]

# Make the lock:
build_lock = SlavegroupLock("slave_builds",
                            maxCount = 5,
                            slaveToSlavegroup = slaveToSlavegroup,
                            maxCountForSlavegroup = { 'bioeng1028': 3 })

# Merge build requests if they are the same.
def mergeRequests(builder, req1, req2):
    # Ignore source stamps, only look at reason...
    return req1.source.canBeMergedWith(req2.source) and (req1.reason == req2.reason)
c['mergeRequests'] = mergeRequests

# Step to ensure required properties are present or set defaults...
class CheckPropertiesSetDefault(BuildStep):
    def __init__(self, defProps, timeout=5, **kwargs):
        BuildStep.__init__(self, **kwargs)
        self.defaultProperties = defProps
        self.addFactoryArguments(timeout=timeout)
        self.addFactoryArguments(defProps=defProps)

    def start(self):
        for (pn, pv) in self.defaultProperties.items():
            try:
                self.getProperty(pn)
            except KeyError:
                self.setProperty(pn, pv)
        self.finished(SUCCESS)

# Step on how to check out the API...
class GitCheckoutMaybeClean(Git):
    def __init__(self,timeout=60*20,repourl='',mode='update',**kwargs):
        Git.__init__(self, repourl=repourl, mode=mode, timeout=timeout,**kwargs)
    def start(self,**kwargs):
        #try:
        #    self.getProperty('clean')
        #except KeyError:
        #    self.setProperty('clean', False)
        if self.getProperty('clean'):
	    self.args['workdir'] = 'pristine'
	    self.args['copydir'] = 'copy'
            self.args['mode'] = 'clobber'
        else:
            self.args['mode'] = 'update'
            self.args['workdir'] = 'dep'
        Git.start(self, **kwargs)


class MakeCommand(WarningCountingShellCommand):
    def __init__(self,timeout=60*60,command='',**kwargs):
        WarningCountingShellCommand.__init__(self, command=command, timeout=timeout, **kwargs)
    def start(self, **kwargs):
        useMake = self.getProperty('make')
        targList = self.getProperty('targets').replace(':', ' ').split(' ')
        self.setCommand([useMake] + targList + ["VERBOSE=1", "CTEST_OUTPUT_ON_FAILURE=TRUE"])
        WarningCountingShellCommand.start(self, **kwargs)

# The standard factory for running a CellML build.
apiBuildFactory = factory.BuildFactory()
# 0: Check properties & set defaults.
apiBuildFactory.addStep(CheckPropertiesSetDefault({ 'clean': False, 'targets': 'all test buildpython' }))
# 1: Checkout.
apiBuildFactory.addStep(GitCheckoutMaybeClean(alwaysUseLatest=True, repourl='ssh://buildbot@bioeng1037//people/amil082/gitmirror/cellml-api'))
# 2: Configure.
confCmd = WarningCountingShellCommand(command=
                                      ["cmake", WithProperties("-DCMAKE_BUILD_TYPE:STRING=%s", "buildType"),
                                       "-G", WithProperties("%s", "generator"),
                                       "-DCHECK_BUILD:BOOL=ON",
                                       "-DENABLE_EVERYTHING:BOOL=ON", "."],
                                      timeout=60*60)
apiBuildFactory.addStep(confCmd)
# 3: Build:
buildCmd = MakeCommand()
apiBuildFactory.addStep(buildCmd)

# The standard factory for running an OpenCOR build.
openCORCISBuildFactory = factory.BuildFactory()
openCORCISBuildFactory.addStep(CheckPropertiesSetDefault({ 'clean': False, 'targets': 'all' }))
openCORCISBuildFactory.addStep(GitCheckoutMaybeClean(alwaysUseLatest=True, repourl='ssh://buildbot@bioeng1037//people/amil082/gitmirror/opencor-cis'))
openCORCISBuildFactory.addStep(
    WarningCountingShellCommand(command=
                                ["cmake", WithProperties("-DCMAKE_BUILD_TYPE:STRING=%s", "buildType"),
                                 "-G", WithProperties("%s", "generator"), ".."],
                                timeout=60*60,
                                workdir="build/build",
                                env={'CMAKE_OSX_ARCHITECTURES': 'x86_64'}
                               ))
openCORCISBuildFactory.addStep(MakeCommand(workdir="build/build"))

openCORAGBuildFactory = factory.BuildFactory()
openCORAGBuildFactory.addStep(CheckPropertiesSetDefault({ 'clean': False, 'targets': 'all' }))
openCORAGBuildFactory.addStep(GitCheckoutMaybeClean(alwaysUseLatest=True, repourl='ssh://buildbot@bioeng1037//people/amil082/gitmirror/opencor-ag'))
openCORAGBuildFactory.addStep(
    WarningCountingShellCommand(command=
                                ["cmake", WithProperties("-DCMAKE_BUILD_TYPE:STRING=%s", "buildType"),
                                 "-G", WithProperties("%s", "generator"), ".."],
                                timeout=60*60,
                                workdir="build/build",
                                env={'CMAKE_OSX_ARCHITECTURES': 'x86_64'}
                                ))
openCORAGBuildFactory.addStep(MakeCommand(workdir="build/build"))

c['builders'] = map(lambda sl: {'name': 'CellMLAPI-' + sl,
                                'slavename': sl,
                                'builddir': sl + '-api',
                                'factory': apiBuildFactory,
                                'locks': [build_lock.access('counting')]
                                }, slavenames) +\
                map(lambda sl: {'name': 'OpenCORCIS-' + sl,
                                'slavename': sl,
                                'builddir': sl + '-opencorcis',
                                'factory': openCORCISBuildFactory,
                                'locks': [build_lock.access('counting')]
                               }, appslavenames) +\
                map(lambda sl: {'name': 'OpenCORAG-' + sl,
                                'slavename': sl,
                                'builddir': sl + '-opencorag',
                                'factory': openCORAGBuildFactory,
                                'locks': [build_lock.access('counting')]
                                }, appslavenames)

# Status targets for showing the results:
c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))
c['status'].append(html.WebStatus(http_port=8011, allowForce=False))

c['status'].append(mail.MailNotifier(fromaddr="automated-notifications-sender@cellml.org",
                                     extraRecipients=["automated-notifications@cellml.org"],
                                     sendToInterestedUsers=False, mode="problem",
                                     relayhost="mailhost.auckland.ac.nz"))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


# Debugging options
#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

# The 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectName'] = "The CellML Project"
c['projectURL'] = "http://www.cellml.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.
c['buildbotURL'] = "http://autotest.bioeng.auckland.ac.nz/cellml-build/"
