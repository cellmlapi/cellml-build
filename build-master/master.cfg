# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
import csv
r = csv.reader(open('/people/amil082/docs/build-slaves.csv'))
c['slaves'] = []
for row in r:
    c['slaves'].append(BuildSlave(row[0], row[1], max_builds=row[2]))

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Triggerable, Nightly

checkin_api = Scheduler(name="checkin_api", branch=None,
                        treeStableTimer=2*60, builderNames=["checkin_api"],
                        categories=["cellml-api"]
                       )
nightly = Nightly(name="nightly", hour=23, builderNames=["nightly"], onlyIfChanged=True)
build_api = Triggerable(name="build_api", builderNames=["build_api-x86-linux-a",
                                                        # "build_api-mingw32-a",
                                                        # "build_api-amd64-linux-a",
                                                        "build_api-msvc9-win32-a",
                                                        "build_api-mac-osx-a",
                                                        "build_api_linux-host-mingw-target",
                                                        "valgrind_build_api-x86-linux-a"])
package_api = Triggerable(name="package_api",
                          builderNames=["package_api-x86-linux-a",
                                        "package_api-msvc9-win32-a",
                                        "package_api-mac-osx-a",
                                        "package_api-linux-host-mingw-target"])

clean_build_api = Triggerable(name="clean_build_api",
                              builderNames=["clean_build_api-x86-linux-a",
                                            # "clean_build_api-mingw32-a",
                                            # "clean_build_api-amd64-linux-a",
                                            "clean_build_api-msvc9-win32-a",
                                            "clean_build_api-mac-osx-a",
                                            "clean_build_api-linux-host-mingw-target"])
# To do: try rules.

c['schedulers'] = [
    checkin_api, nightly, build_api, clean_build_api, package_api
]


## Merging
def mergeRequests(builder, req1, req2):
    # Ignore source stamps, only look at reason...
    return (req1.reason == req2.reason)
c['mergeRequests'] = mergeRequests

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

hgurl = "http://cellml-api.hg.sourceforge.net/hgroot/cellml-api/cellml-build/"

from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import WarningCountingShellCommand

hgstep = Mercurial(repourl=hgurl, branchType='inrepo', alwaysUseLatest=True)

def factoryWithCommand(tree, cmd, deptype):
    buildFactory = factory.BuildFactory()
    buildFactory.addStep(hgstep)
    buildFactory.addStep(WarningCountingShellCommand(command=["python", "./scripts/run-platform-command.py", tree, cmd, deptype], timeout=60*60*2))
    return buildFactory

nightlyFactory = factory.BuildFactory()
nightlyFactory.addStep(Trigger(schedulerNames=["clean_build_api"], waitForFinish=True))
nightlyFactory.addStep(Trigger(schedulerNames=["package_api"], waitForFinish=True))

checkinAPIFactory = factory.BuildFactory()
checkinAPIFactory.addStep(Trigger(schedulerNames=["build_api"], waitForFinish=True))

targets = {}
targets['build_api'] = factoryWithCommand("cellml-api", "test", "depend")
targets['valgrind_build_api'] = factoryWithCommand("cellml-api", "test", "depend,valgrind")
targets['clean_build_api'] = factoryWithCommand("cellml-api", "test", "clobber")
targets['package_api'] = factoryWithCommand("cellml-api", "package", "NA")
targets['build_api_java'] = factoryWithCommand("cellml-api", "test-java", "clobber")
# targets['package_api_java'] = factoryWithCommand("cellml-api", "package-java", "NA")

def builderFor(target, platform):
    return {
            'name': target + '-' + platform,
            'slavename': platform,
            'builddir': target + '-' + platform,
            'factory': targets[target]
           }

c['builders'] = [
    # The 'generic' builders that trigger other commands...
    {
     'name': "nightly",
     'slavename': "x86-linux-a",
     'builddir': "nightly",
     'factory': nightlyFactory
    },
    {
     'name': "checkin_api",
     'slavename': "x86-linux-a",
     'builddir': "checkin_api",
     'factory': checkinAPIFactory
    },
    # The platform specific builders...
    builderFor("build_api", "x86-linux-a"),
    builderFor("valgrind_build_api", "x86-linux-a"),
    # builderFor("build_api", "mingw32-a"),
    #builderFor("build_api", "amd64-linux-a"),
    builderFor("build_api", "msvc9-win32-a"),
    builderFor("build_api", "mac-osx-a"),
    builderFor("build_api", "linux-host-mingw-target"),
    builderFor("clean_build_api", "x86-linux-a"),
    # builderFor("clean_build_api", "mingw32-a"),
    # builderFor("clean_build_api", "amd64-linux-a"),
    builderFor("clean_build_api", "msvc9-win32-a"),
    builderFor("clean_build_api", "mac-osx-a"),
    builderFor("clean_build_api", "linux-host-mingw-target"),
    builderFor("package_api", "x86-linux-a"),
    builderFor("package_api", "msvc9-win32-a"),
    builderFor("package_api", "mac-osx-a"),
    builderFor("package_api", "linux-host-mingw-target")
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))
c['status'].append(html.WebStatus(http_port=8011, allowForce=False))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="automated-notifications-sender@cellml.org",
                                     extraRecipients=["automated-notifications@cellml.org"],
                                     sendToInterestedUsers=False, mode="problem",
                                     relayhost="mailhost.auckland.ac.nz"))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "The CellML Project"
c['projectURL'] = "http://www.cellml.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://autotest.bioeng.auckland.ac.nz/cellml-build/"
